param(
    [string]$ApiKey, # VirusTotal API key passed as a parameter
    [string]$ManifestPath # Relative path to the manifest file
)

# Convert the relative path to an absolute path
$AbsolutePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $ManifestPath

# Check if the manifest file exists
if (-not (Test-Path -Path $AbsolutePath)) {
    Write-Error "Manifest file not found at path: $AbsolutePath"
    exit 1
}


$VirusTotalUrl = "https://www.virustotal.com/api/v3/search?query="

function Check-HashWithVirusTotal($hash) {
    $headers = @{
        "accept" = "application/json"
        "X-Apikey" = $ApiKey
    }

    $response = Invoke-RestMethod -Uri "$VirusTotalUrl$hash" -Method Get -Headers $headers
    $maliciousCount = 0

    if ($response.StatusCode -eq 200 -and $response.data.Count -gt 0) {
        $maliciousCount = $response.data[0].attributes.last_analysis_stats.malicious
    }

    return $maliciousCount
}

function Get-HashesFromManifest($manifestPath) {
    $manifestContent = Get-Content -Path $manifestPath -Raw
    $matches = [regex]::Matches($manifestContent, "InstallerSha256:\s*([A-Fa-f0-9]{64})")
    $hashes = $matches | ForEach-Object { $_.Groups[1].Value }
    return $hashes
}

$hashes = Get-HashesFromManifest $ManifestPath

foreach ($hash in $hashes) {
    $maliciousCount = Check-HashWithVirusTotal $hash
    if ($maliciousCount -gt 1) {
        Write-Host "Hash: $hash in file $ManifestPath is found malicious $maliciousCount times."
        exit 1
    }
    else
    {
        Write-Host "Hash: $hash in file $ManifestPath is clean!"
    }
}

Write-Host "Manifest file $ManifestPath passed VirusTotal checks."